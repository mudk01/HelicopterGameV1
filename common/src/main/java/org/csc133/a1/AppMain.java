package org.csc133.a1;

import static com.codename1.ui.CN.*;

import com.codename1.charts.util.ColorUtil;
import com.codename1.system.Lifecycle;
import com.codename1.ui.*;
import com.codename1.ui.geom.Point;
import com.codename1.ui.layouts.*;
import com.codename1.io.*;
import com.codename1.ui.plaf.*;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;
import org.graalvm.compiler.phases.util.GraphOrder;

import java.util.ArrayList;
import java.util.Random;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class AppMain extends Lifecycle {
    @Override
    public void runApp() {
        new Game().show();
    }


}

class Game extends Form implements Runnable {
    private GameWorld gw;

    final static int DISP_W = Display.getInstance().getDisplayWidth();
    final static int DISP_H = Display.getInstance().getDisplayHeight();
//
//    public static int getSmallDim() { return Math.min(DISP_W,DISP_H); }
//    public static int getLargeDim() { return Math.max(DISP_W,DISP_H); }

    public Game() {
        gw = new GameWorld();

        addKeyListener('Q', (evt) -> gw.quit());
        addKeyListener(-92, (evt) -> gw.input(-92));
        addKeyListener(-91, (evt) -> gw.input(-91));
        addKeyListener(-94, (evt) -> gw.input(-94));
        addKeyListener(-93, (evt) -> gw.input(-93));


        UITimer timer = new UITimer(this);
        timer.schedule(100, true, this);

        this.getAllStyles().setBgColor(ColorUtil.BLACK);
        this.show();
    }

     public void paint(Graphics g) {
        super.paint(g);
        gw.draw(g);
    }

    @Override
    public void run() {
        gw.tick();
        repaint();
    }

}

class GameWorld {
    private River river;
    private Helipad helipad;
    private Fire fire1, fire2, fire3;
    private ArrayList<Fire> fires;
    private Helicopter helicopter;
    private int fireSize1, fireSize2, fireSize3;
    private Point fireLocation1, fireLocation2, fireLocaton3;


    public GameWorld() {
        init();
    }

    private void init() {
        river = new River();
        helipad = new Helipad();
        fireSize1 = new Random().nextInt(100) +
                Game.DISP_H/10;
        fireSize2 = new Random().nextInt(100) +
                Game.DISP_H/8;
        fireSize3 = new Random().nextInt(100) +
                Game.DISP_H/5;
        fireLocation1 = new Point(new Random().nextInt(80) +
                (int)(Game.DISP_W/4.5),
                new Random().nextInt(50) +
                Game.DISP_H/3 -
                (int)(Game.DISP_H/3.5));
        fireLocation2 = new Point(new Random().nextInt(80) +
                Game.DISP_W/2,
                new Random().nextInt(80) +
                Game.DISP_H/2);
        fireLocaton3 = new Point(new Random().nextInt(50) +
                Game.DISP_W -
                (int)(fireSize3*1.5), new Random().nextInt(80) +
                Game.DISP_H/3 -
                (int)(Game.DISP_H/3.5));
        fire1 = new Fire(fireSize1, fireLocation1);
        fire2 = new Fire(fireSize2, fireLocation2);
        fire3 = new Fire(fireSize3, fireLocaton3);
        fires = new ArrayList<>();
        fires.add(fire1);
        fires.add(fire2);
        fires.add(fire3);
        helicopter = new Helicopter(helipad.getCenterX(), helipad.getCenterY());
    }

    void draw(Graphics g) {
        river.draw(g);
        helipad.draw(g);
        for(Fire fire : fires) {
            fire.draw(g);
        }
        helicopter.draw(g);
    }

    public void tick() {
        for(Fire fire : fires) {
            if((new Random().nextInt(100)) % 3 == 0) {
                fire.growFire();
            }
        }

    }

    public void input(int input) {
        switch (input) {
            case -92:
                helicopter.moveBackwards();
                break;
            case -91:
                helicopter.moveForwards();
                break;
            case -93:
                helicopter.moveRight();
                break;
            case -94:
                helicopter.moveLeft();
                break;
        }
    }

//    public void move(int input) {
//
//    }

    public void quit() {
        Display.getInstance().exitApplication();
    }
}

class River {
    private Point location;
    private int width;
    private int height;

    public River() {
        width = Game.DISP_W;
        height = Game.DISP_H/8;
        location = new Point(0, Game.DISP_H/3 - height);

    }

    void draw(Graphics g) {
        g.setColor(ColorUtil.BLUE);
        g.drawRect(location.getX(),location.getY(), width, height);
    }
}

class Helipad {
    private Point rectangleLocation, centerLocation;
    private int boxSize;
    private int circleSize, radius;

    public Helipad() {
        boxSize = 150;
        circleSize = 100;
        radius = circleSize/2;
        rectangleLocation = new Point(Game.DISP_W/2 - boxSize/2,
                (int) (Game.DISP_H - (boxSize*1.5)));
        centerLocation =
                new Point(rectangleLocation.getX() + (boxSize/2),
                        rectangleLocation.getY() + (boxSize/2));
    }

    void draw(Graphics g) {
        g.setColor(ColorUtil.GRAY);
        g.drawRect(rectangleLocation.getX(), rectangleLocation.getY(), boxSize,
                boxSize, 5);
//        g.drawArc(centerLocation.getX() + (boxSize-circleSize)/2,
//                centerLocation.getY() + (boxSize-circleSize)/2, circleSize,
//                circleSize, 0, 360);
        g.drawArc(centerLocation.getX() - radius,
                centerLocation.getY() - radius, circleSize,
                circleSize, 0, 360);
        g.setColor(ColorUtil.BLUE);
    }

    public int getCenterX() {
        return centerLocation.getX() + (boxSize/2);
    }

    public int getCenterY() {
        return centerLocation.getY() + (boxSize/2);
    }

}

class Fire {
    private Point centerLocation;
    private int size, radius;
    private Font fireSizeFont;

    public Fire(int fireSize, Point fireLocation) {
        size = fireSize;
        radius = fireSize/2;
        centerLocation = new Point(fireLocation.getX() + radius,
                fireLocation.getY() + radius);
        fireSizeFont = Font.createSystemFont(Font.FACE_SYSTEM,
                Font.STYLE_PLAIN, Font.SIZE_MEDIUM);

    }

    //TODO: Still need to grow fire from center out, so need to redo fire
    // object creations
    //

    void growFire() {
        int move = new Random().nextInt(5);
        size += move;
        centerLocation.setX(centerLocation.getX() - (int)(move/2));
        centerLocation.setY(centerLocation.getY() - (int)(move/2));
    }

    void draw(Graphics g) {
        g.setColor(ColorUtil.MAGENTA);
        g.setFont(fireSizeFont);

        g.fillArc(centerLocation.getX() - radius,
                centerLocation.getY() - radius, size, size,0,
                360);
        g.drawString("" + size, centerLocation.getX() + radius,
                centerLocation.getY() + radius);
        g.setColor(ColorUtil.BLUE);
        g.drawLine(centerLocation.getX(), centerLocation.getY(),
                centerLocation.getX() + radius, centerLocation.getY() + radius);
    }

}

class Helicopter {
    private int size, hRadius, centerX, centerY;
    private Point location;
    private int startHeadX, startHeadY, endHeadX, endHeadY;
    private double angle;

    public Helicopter(int centerex, int centerwhy) {
        size = 30;
        location = new Point(Game.DISP_W/2 - (int)(size*1.5),
                Game.DISP_H - (int)(Game.DISP_H/8.5));
        hRadius = size/2;
        centerX = centerex;
        centerY = centerwhy;
        angle = Math.toRadians(-90);
        startHeadX = location.getX() + size +size/2;
        startHeadY = location.getY() + size + size/2;
        endHeadX = (int) (centerX + hRadius * Math.cos(angle));
        endHeadY = (int) (centerY - hRadius * Math.sin(angle));

    }

    public void move(){
        /*
         */
    }

    void moveForwards() {
        location.setY(location.getY() - 10);
    }

    void moveBackwards() {
        location.setY(location.getY() + 10);
    }

    void moveLeft() {
        location.setX(location.getX() + 10);
    }

    void moveRight() {
        location.setX(location.getX() - 10);
    }

    void draw(Graphics g) {
        g.setColor(ColorUtil.YELLOW);
        g.fillArc(location.getX() + size, location.getY() + size, size,
                size, 0, 360);

        //Line not displaying correctly, sometimes visible, sometimes not displayed
        //most likely some bug, will look into
        //
//        g.drawLine(startHeadX,startHeadY, endHeadX,
//                endHeadY);
    }


}