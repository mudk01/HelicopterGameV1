package org.csc133.a1;

import static com.codename1.ui.CN.*;

import com.codename1.charts.util.ColorUtil;
import com.codename1.system.Lifecycle;
import com.codename1.ui.*;
import com.codename1.ui.geom.Point;
import com.codename1.ui.layouts.*;
import com.codename1.io.*;
import com.codename1.ui.plaf.*;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;
import org.graalvm.compiler.phases.util.GraphOrder;

import java.util.Random;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class AppMain extends Lifecycle {
    @Override
    public void runApp() {
        new Game().show();
    }


}

class Game extends Form implements Runnable {
    private GameWorld gw;

    public Game() {
        gw = new GameWorld();

        UITimer timer = new UITimer(this);
        timer.schedule(100, true, this);

        this.getAllStyles().setBgColor(ColorUtil.BLACK);
        this.show();
    }

     public void paint(Graphics g) {
        super.paint(g);
        gw.draw(g);
    }

    @Override
    public void run() {
        repaint();
    }

}

class GameWorld {
    private River river;
    private Helipad helipad;
    private Fire fire;

    public GameWorld() {
        init();
    }
    private void init() {
        river = new River();
        helipad = new Helipad();
        fire = new Fire();
    }
    void draw(Graphics g) {
        river.draw(g);
        helipad.draw(g);
        fire.draw(g);
    }
}

class River {
    private Point location;
    private int width;
    private int height;

    public River() {
        width = Display.getInstance().getDisplayWidth();
        height = Display.getInstance().getDisplayHeight()/8;
        location = new Point(0, Display.getInstance().getDisplayHeight()/3 - height);

    }

    void draw(Graphics g) {
        g.setColor(ColorUtil.BLUE);
        g.drawRect(location.getX(),location.getY(), width, height);
    }
}

class Helipad {
    private Point centerLocation;
    private int boxSize;
    private int circleSize;

    public Helipad() {
        boxSize = 150;
        circleSize = 120;
        centerLocation = new Point(Display.getInstance().getDisplayWidth()/2 - boxSize/2, (int) (Display.getInstance().getDisplayHeight() - (boxSize*1.5)));
    }

    void draw(Graphics g) {
        g.setColor(ColorUtil.GRAY);
        g.drawRect(centerLocation.getX(), centerLocation.getY(), boxSize, boxSize, 5);
        g.drawArc(centerLocation.getX() + (boxSize-circleSize)/2, centerLocation.getY() + (boxSize-circleSize)/2, circleSize, circleSize, 0, 360);
    }
}

class Fire {
    private Point location1, location2, location3;
    private int size;

    //TODO : Research how to use Fire in a Java Collection.
    //

    public Fire() {
        size = new Random().nextInt(100) + Display.getInstance().getDisplayHeight()/10;
        location1 = new Point(new Random().nextInt(80) + Display.getInstance().getDisplayWidth()/4, new Random().nextInt(50) + Display.getInstance().getDisplayHeight()/3 - (int)( Display.getInstance().getDisplayHeight()/3.5));
        location2 = new Point(new Random().nextInt(50) + Display.getInstance().getDisplayWidth()/4, new Random().nextInt(20) + Display.getInstance().getDisplayHeight()/3 - Display.getInstance().getDisplayHeight()/2);
    }

    void draw(Graphics g) {
        g.setColor(ColorUtil.MAGENTA);
        g.fillArc(location1.getX(),location1.getY(), size,size,0,360);
        g.drawString("" + size, location1.getX() + size , location1.getY() + size);
    }

}

//class Helicopter {
//
//}